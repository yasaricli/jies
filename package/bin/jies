#!/usr/bin/env node

var path = require('path'),
    Jies = require('../lib/core.js'),
    fs = require('fs'),
    _ = require('underscore'),

    helpers = require('../lib/helpers.js');

var json = path.resolve('jies.json'),
    action = process.argv[2],

    // read json File
    readJson = function(callback) {
      fs.readFile(json, 'utf8', function (err, data) {
        var options = JSON.parse(data);

        if (_.isEmpty(options.functions)) {
          return helpers.getHelper('emptyFunctionsLog');
        }

        callback(options);
      });
    }

helpers.getHelper('startedLog');

switch(action) {
  case 'init':
    var exampleJson = path.resolve(__dirname, '../example/jies.json'),
        content = fs.readFileSync(exampleJson, 'utf8');

    if(fs.existsSync(json)) {
      return helpers.getHelper('alreadyLog');
    }

    // touched init
    helpers.getHelper('createdInitLog');

    return fs.writeFileSync(json, content);
  break;

  case 'install':
    var J = new Jies.Init();

    if (!fs.existsSync(json)) {
      return helpers.getHelper('notExistLog');
    }

    readJson(function(options) {

      // started
      helpers.getHelper('incStartedLog', options.name);

      // include functions
      J.include(options, function(name) {

        // completed
        helpers.getHelper('includedLog', name, ' included.'.bold.yellow);

      }, function(name) {

        // fail
        helpers.getHelper('includedLog', name, ' not defined'.bold.red);
      });
    });
  break;

  case "list":
    readJson(function(options) {
      helpers.getHelper('listFunctionsLog', options.functions);
    });
  break;

  default:
    helpers.getHelper('validLog');
};
